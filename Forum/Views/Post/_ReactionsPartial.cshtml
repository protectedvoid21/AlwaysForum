@using AlwaysForum.Extensions
@model int

@{
    string userId = User.GetId();
}

<style>
    img {
        cursor: pointer;
        width: 50px;
        transition: all 0.4s;
    }

    img:hover {
        transform: scale(1);
    }

    .non-reacted {
        opacity: 0.4;
        transform: scale(0.7);
    }

    .reaction-count {
        font-size: 1.5em;
        text-align: center;
    }
</style>

<div class="d-flex justify-content-around">
    <div>
        <img src="/images/like.svg" onclick="react('like')"/>
        <p class="reaction-count">0</p>
    </div>
    <div>
        <img src="/images/heart.svg" onclick="react('love')"/>
        <p class="reaction-count">0</p>
    </div>
    <div>
        <img src="/images/wow.svg" onclick="react('wow')"/>
        <p class="reaction-count">0</p>
    </div>
    <div>
        <img src="/images/sad.svg" onclick="react('sad')"/>
        <p class="reaction-count">0</p>
    </div>
    <div>
        <img src="/images/angry.svg" onclick="react('angry')"/>
        <p class="reaction-count">0</p>
    </div>
</div>

<script>
    const reactionImages = document.querySelectorAll('img')
    const reactionTexts = document.querySelectorAll('.reaction-count')

    async function getReactions() {
        const response = await fetch('https://localhost:7150/api/reaction/' + @Model)
        const jsonResponse = await response.json()

        const userReaction = jsonResponse.find(r => r.userId === '@userId')
        if (userReaction != null) {
            const reactionIndex = userReaction.reactionType
            for (let i = 0; i < 5; i++) {
                if (i === reactionIndex) {
                    reactionImages[i].classList.remove('non-reacted')
                    continue
                }

                reactionImages[i].classList.add('non-reacted')
            }
        }
        else {
            for (let i = 0; i < 5; i++) {
                reactionImages[i].classList.add('non-reacted')
            }
        }

        for (let i = 0; i < 5; i++) {
            reactionTexts[i].textContent = jsonResponse.filter(r => r.reactionType === i).length
        }
    }

    window.onload = getReactions()

    async function react(reactionType) {
        const url = `https://localhost:7150/api/reaction/${reactionType}/${@Model}`

        await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })

        await getReactions()
    }
</script>