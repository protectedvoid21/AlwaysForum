@using AlwaysForum.Components
@using Data.ViewModels.Report
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Post

@{
    bool isAuthor = false;
    if (ViewBag.IsAuthor != null) {
        isAuthor = ViewBag.IsAuthor;
    }
}

<style>
    .title {
        font-weight: bold;
        font-size: 3em;
    }

    .description-container {
        margin-left: 40px;
        margin-right: 20px;
        min-height: 50vh;
    }

    .create-comment { margin: 20px; }

    .comment-list {
        list-style: none;
        list-style-type: none;
        padding: 0;
    }

    .vote-arrow {
        font-size: 2em;
        cursor: pointer;
    }

    .vote-count {
        font-size: 2em;
        font-weight: bold;
    }

    .voted { color: #ff3535; }

    .non-voted {
        background-color: rgba(0, 0, 0, 0);
        border: 2px solid #9b9b9b
    }

    .vote-arrow .vote-count { line-height: 0; }

    .report-container {
        display: none;
    }
</style>


<div class="d-flex justify-content-between">
    <h2 class="title flex-fill">@Model.Title</h2>
    @if (isAuthor) {
        <div class="d-flex">
            <a class="btn btn-info m-3" asp-controller="Post" asp-action="Edit" asp-route-postId="@Model.Id">Edit</a>
            <a class="btn btn-danger m-3" asp-controller="Post" asp-action="Delete" asp-route-postId="@Model.Id">Delete</a>
        </div>
    }
    else if(User.Identity.IsAuthenticated) {
        <div>
            <a id="report-button" class="btn btn-danger m-3">Report</a>
            <div id="report-container" class="popup">
                <div class="component-container">
                    @await Component.InvokeAsync(typeof(CreateReportViewComponent), new ReportComponentData { ObjectId = Model.Id, ReportTarget = ReportTarget.Post })
                </div>
            </div>
        </div>
    }
</div>

<div class="d-flex justify-content-between">
    <h4>Author : <a class="link-dark text-decoration-none fw-bold" asp-controller="User" asp-action="Profile" asp-route-userId="@Model.AuthorId">@Model.Author.UserName</a></h4>
    <div>@Model.CreatedDate</div>
</div>

<hr/>

<div class="description-container">@Html.Raw(Model.Description)</div>
<partial name="_ReactionsPartial" model="@Model.Id"/>
<hr/>
<div class="create-comment">
    @await Component.InvokeAsync("CreateComment", Model.Id)
</div>

<h3><strong>@Model.Comments.Count</strong> Comments</h3>
<ul class="comment-list">
    @foreach (var comment in Model.Comments) {
        <li class="mb-3" onmouseover="displayCommentButtons(this, 'visible')" onmouseout="displayCommentButtons(this, 'hidden')">
            <partial name="_CommentViewPartial" model="comment"/>
        </li>
    }
</ul>

@section Scripts {
    <script>
        const voteCounts = document.querySelectorAll('.vote-count')
        const voteContainers = document.querySelectorAll('.vote-container')

        async function getVoteCount(commentId) {
            const response = await fetch('https://localhost:7150/api/commentvote/' + commentId)
            const voteCount = await response.json()

            return voteCount
        }

        async function addVote(voteType, commentId) {
            await fetch('https://localhost:7150/api/commentvote',
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        commentId: commentId,
                        isUpVote: voteType,
                    }),
                })

            const voteContainer = document.querySelector(`[data-comment-id="${commentId}"]`)
            await markVoted(voteContainer, commentId)

            const commentVoteCount = voteContainer.querySelector('.vote-count')
            commentVoteCount.textContent = await getVoteCount(commentId)
        }

        async function isVoted(commentId) {
            const response = await fetch('https://localhost:7150/api/commentvote/isvoted/' + commentId)
            return response.json()
        }

        async function markVoted(voteContainer, commentId) {
            const voteType = await isVoted(commentId)
            if (voteType === 0) {
                voteContainer.querySelectorAll('.vote-arrow').forEach(arrow => {
                    arrow.classList.remove('text-danger')
                })
                return
            }

            const voteTypeName = voteType === 1 ? 'up' : 'down'
            const oppositeType = voteType === 1 ? 'down' : 'up'

            voteContainer.querySelector(`[data-arrow-type="${voteTypeName}"]`).classList.add('text-danger')
            voteContainer.querySelector(`[data-arrow-type="${oppositeType}"]`).classList.remove('text-danger')
        }

        window.onload = async () => {
            voteContainers.forEach(async (voteContainer) => {
                const commentId = voteContainer.dataset.commentId

                const voteCount = voteContainer.querySelector('.vote-count')
                voteCount.textContent = await getVoteCount(commentId)
                await markVoted(voteContainer, commentId)
            })
        }
    </script>
    <script>
        const reportButton = document.getElementById('report-button')
        const reportContainer = document.getElementById('report-container')
        const closeReportButton = document.querySelector('.close')

        reportButton.addEventListener('click', () => {
            reportContainer.style.display = 'block'
        })

        closeReportButton.addEventListener('click', () => {
            reportContainer.style.display = 'none'
        })

        function displayCommentButtons(commentContainer, visibilityState) {
            commentContainer.querySelector('.comment-buttons').style.visibility = visibilityState
        }
    </script>
}