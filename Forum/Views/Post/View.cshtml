@model Post

@{
    bool isAuthor = ViewBag.IsAuthor;
}

<style>
    .title {
        font-weight: bold;
        font-size: 3em;
    }

    .description-container {
        margin-left: 40px;
        margin-right: 20px;
        min-height: 50vh;
    }

    .create-comment {
        margin: 20px;
    }

    .comment-list {
        list-style: none;
        list-style-type: none;
        padding: 0;
    }

    .vote-arrow {
        font-size: 2em;
        cursor: pointer;
    }

    .vote-count {
        font-size: 2em;
        font-weight: bold;
    }

    .voted {
        color: #ff3535;
    }

    .non-voted {
        background-color: rgba(0, 0, 0, 0);
        border: 2px solid #9b9b9b
    }

    .vote-arrow .vote-count {
        line-height: 0;
    }
</style>


<div class="d-flex justify-content-between">
    <h2 class="title flex-fill">@Model.Title</h2>
    @if (isAuthor) {
        <div class="d-flex">
            <a class="btn btn-info m-3" asp-controller="Post" asp-action="Edit" asp-route-postId="@Model.Id">Edit</a>
            <a class="btn btn-danger m-3" asp-controller="Post" asp-action="Delete" asp-route-postId="@Model.Id">Delete</a>
        </div>
    }
</div>

<div class="d-flex justify-content-between">
    <h4>Author : <a class="link-dark text-decoration-none fw-bold" asp-controller="User" asp-action="Profile" asp-route-userId="@Model.AuthorId">@Model.Author.UserName</a></h4>
    <div>@Model.CreatedDate</div>
</div>

<hr/>

<div class="description-container">@Html.Raw(Model.Description)</div>
<partial name="_ReactionsPartial" model="@Model.Id"/>
<hr/>
<div class="create-comment">
    @await Component.InvokeAsync("CreateComment", Model.Id)
</div>

<h3><strong>@Model.Comments.Count</strong> Comments</h3>
@foreach (var comment in Model.Comments) {
    <ul class="comment-list">
        <li>
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <a asp-controller="User" asp-action="Profile" asp-route-userId="@comment.AuthorId">@comment.Author.UserName</a>
                    <div>@comment.CreatedTime</div>
                </div>
                <div class="d-flex">
                    <div>
                        <div>
                            <div class="d-flex flex-column m-lg-2">
                                <div class="vote-arrow user-select-none" onclick="addVote(true, @comment.Id)">⬆</div>
                                <div id="@comment.Id" class="vote-count user-select-none">0</div>
                                <div class="vote-arrow user-select-none" onclick="addVote(false, @comment.Id)">⬇</div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">@Html.Raw(comment.Description)</div>
                </div>
            </div>
        </li>
    </ul>
}

@section Scripts {
    <script>
        const voteCounts = document.querySelectorAll('.vote-count')

        async function getVoteCount(commentId) {
            const response = await fetch('https://localhost:7150/api/commentvote/' + commentId)
            const voteCount = await response.json()

            return voteCount
        }

        async function addVote(voteType, commentId) {
            await fetch('https://localhost:7150/api/commentvote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentId: commentId,
                    isUpVote: voteType,
                }),
            })

            const commentVoteCount = document.getElementById(commentId)
            commentVoteCount.textContent = await getVoteCount(commentId)
        }

        window.onload = async () => {
            voteCounts.forEach(async (voteCount) => {
                const commentId = voteCount.id
                voteCount.textContent = await getVoteCount(commentId)
            })
        }
    </script>
}